import { Students } from "@prisma/client";
import { type NextPage } from "next";
import Head from "next/head";
import { Dispatch, FC, SetStateAction, useState } from "react";
import { HiX } from 'react-icons/hi'
import { trpc } from "../utils/trpc";

interface StudentModalProps {
  setModalOpen: Dispatch<SetStateAction<boolean>>
  setStudents: Dispatch<SetStateAction<Students[]>>
}

const StudentModal: FC<StudentModalProps> = ({ setModalOpen, setStudents }) => {
  const [name, setName] = useState<string>('')
  const [parent, setParent] = useState<string>('')
  const [grade, setGrade] = useState<string>('')

  const ctx = trpc.useContext();

  const { mutate: addStudent } = trpc.student.addStudent.useMutation({
    onSuccess: () => ctx.student.getAll.invalidate() 
  });

  return (
    <div className='absolute inset-0 flex items-center justify-center bg-black/75'>
      <div className='space-y-4 bg-white p-3 justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]'>
        <h3 className='text-xl font-semibold'>Student Name</h3>
        <input
        id="inputName"
        name="inputName"
          type='text'
          value={name}
          onChange={(e) => setName(e.target.value)}
          className='w-full rounded-md border-gray-300 bg-gray-200 shadow-sm focus:border-violet-300 focus:ring focus:ring-violet-200 focus:ring-opacity-50'
        />
        <h3 className='text-xl font-semibold'>Parent Name</h3>
        <input
        id="inputParent"
        name="inputParent"
          type='text'
          value={parent}
          onChange={(e) => setParent(e.target.value)}
          className='w-full rounded-md border-gray-300 bg-gray-200 shadow-sm focus:border-violet-300 focus:ring focus:ring-violet-200 focus:ring-opacity-50'
        />
        <h3 className='text-xl font-semibold'>Grade</h3>
        <input
        id="inputGrade"
        name="inputGrade"
          type='text'
          value={grade}
          onChange={(e) => setGrade(e.target.value)}
          className='w-full rounded-md border-gray-300 bg-gray-200 shadow-sm focus:border-violet-300 focus:ring focus:ring-violet-200 focus:ring-opacity-50'
        />
        <div className='grid grid-cols-2 gap-8'>
          <button
            type='button'
            onClick={() => setModalOpen(false)}
            className='rounded-md bg-blue-400 p-2 text-sm text-gray-200 transition hover:bg-blue-500'>
            Cancel
          </button>
          <button
            type='button'
            onClick={async (event) => {
              addStudent({
                name: name,
                grade: grade,
                parentName: parent
              })
              setModalOpen(false)
            }}
            className='rounded-md bg-blue-400 p-2 text-sm text-gray-200 transition hover:bg-blue-500'>
            Add
          </button>
        </div>
      </div>
    </div>
  )
}

const Home: NextPage = () => {
  
  const [students, setStudents] = useState<Students[]>([])
  const [modalOpen, setModalOpen] = useState<boolean>(false)

  const ctx = trpc.useContext();

  const { data: studentList, isLoading} = trpc.student.getAll.useQuery();

  const { mutate: deleteStudent} = trpc.student.deleteStudent.useMutation({
    onSuccess: () => ctx.student.getAll.invalidate() 
  });

  if (!studentList || isLoading) return <p>Loading...</p>

  return (
    <>
      <Head>
        <title>Student List</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {modalOpen && <StudentModal setModalOpen={setModalOpen} setStudents={setStudents} />}

      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col ml-6 justify-center gap-12 px-4 py-16 ">
          <h2 className="text-5xl font-extrabold text-center tracking-tight text-gray-300 sm:text-[5rem]">
            Students List
          </h2>

          <button
            type='button'
            onClick={() => setModalOpen(true)}
            className='rounded-md bg-blue-400 p-2 text-sm text-gray-200 transition hover:bg-blue-500'>
            Add Student
          </button>
            <table className="border-separate border-spacing-4 border border-slate-300">
              <thead className="text-gray-200">
                <tr>
                  <th className="border border-slate-500 shadow-lg shadow-indigo-500/40">Name</th>
                  <th className="border border-slate-500 shadow-lg shadow-indigo-500/40">Parent Name</th>
                  <th className="border border-slate-500 shadow-lg shadow-indigo-500/40">Grade</th>
                  <th className="border border-slate-500 shadow-lg shadow-indigo-500/40">Action</th>
                </tr>
              </thead>
              <tbody className="text-white">
                {
                  studentList.map((s) => (
                    <tr key={s.id}>
                        <td className="border border-slate-700">{s.name}</td>
                        <td className="border border-slate-700">{s.parentName}</td>
                        <td className="border border-slate-700">{s.grade}</td>
                        <td className="border border-slate-700">                
                          <ul className='mt-4'>
                            <li key={s.id} className='flex w-full items-center justify-center'>
                                  <HiX onClick={() => deleteStudent({ id: s.id })} className='cursor-pointer text-lg text-red-500' />
                                </li>
                          </ul>
                        </td>
                    </tr>
                  ))
                }
              </tbody>
          </table>
        </div>
      </main>
    </>
  );
};

export default Home;
